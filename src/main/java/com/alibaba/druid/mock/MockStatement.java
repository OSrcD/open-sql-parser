package com.alibaba.druid.mock;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

public class MockStatement implements Statement {
	public final static String ERROR_SQL = "THROW ERROR";

	private Connection connection;
	protected MockConnection fakeConnection;

	public MockStatement(Connection connection) {
		super();
		this.connection = connection;

		if (connection instanceof MockConnection) {
			fakeConnection = (MockConnection) connection;
		}
	}

	public MockConnection getFakeConnection() {
		return fakeConnection;
	}

	public void setFakeConnection(MockConnection fakeConnection) {
		this.fakeConnection = fakeConnection;
		this.connection = fakeConnection;
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return null;
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return false;
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		if (fakeConnection != null && fakeConnection.getDriver() != null) {
			return fakeConnection.getDriver().createResultSet(this, sql);
		}
		
		return new MockResultSet(this);
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		return 0;
	}

	@Override
	public void close() throws SQLException {

	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return 0;
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
	}

	@Override
	public int getMaxRows() throws SQLException {
		return 0;
	}

	@Override
	public void setMaxRows(int max) throws SQLException {

	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {

	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return 0;
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {

	}

	@Override
	public void cancel() throws SQLException {

	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return null;
	}

	@Override
	public void clearWarnings() throws SQLException {

	}

	@Override
	public void setCursorName(String name) throws SQLException {

	}

	@Override
	public boolean execute(String sql) throws SQLException {
		if (ERROR_SQL.equals(sql)) {
			throw new SQLException();
		}

		return false;
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return new MockResultSet(this);
	}

	@Override
	public int getUpdateCount() throws SQLException {

		return 0;
	}

	@Override
	public boolean getMoreResults() throws SQLException {

		return false;
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {

	}

	@Override
	public int getFetchDirection() throws SQLException {
		return 0;
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {

	}

	@Override
	public int getFetchSize() throws SQLException {
		return 0;
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return 0;
	}

	@Override
	public int getResultSetType() throws SQLException {

		return 0;
	}

	@Override
	public void addBatch(String sql) throws SQLException {

	}

	@Override
	public void clearBatch() throws SQLException {

	}

	@Override
	public int[] executeBatch() throws SQLException {
		return new int[0];
	}

	@Override
	public Connection getConnection() throws SQLException {
		return connection;
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {

		return false;
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return new MockResultSet(this);
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException {

		return 0;
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException {

		return 0;
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames)
			throws SQLException {

		return 0;
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException {

		return false;
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {

		return false;
	}

	@Override
	public boolean execute(String sql, String[] columnNames)
			throws SQLException {

		return false;
	}

	@Override
	public int getResultSetHoldability() throws SQLException {

		return 0;
	}

	@Override
	public boolean isClosed() throws SQLException {

		return false;
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {

	}

	@Override
	public boolean isPoolable() throws SQLException {

		return false;
	}

	@Override
	public void closeOnCompletion() throws SQLException {

	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		return false;
	}

}
